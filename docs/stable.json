{
    "meta": {
        "generator": "0.9.0",
        "format": 20,
        "date": 1617364677818
    },
    "custom": {
        "general": {
            "name": "General",
            "files": {
                "welcome": {
                    "name": "Welcome",
                    "type": "md",
                    "content": "<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"/static/logo.svg\" width=\"546\" alt=\"discord.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://img.shields.io/discord/222078108977594368?color=7289da&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\n\nWelcome to the discord.js v12 documentation.\n\n## About\n\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to easily interact with the\n[Discord API](https://discord.com/developers/docs/intro).\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n\n**Node.js 12.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install discord.js`  \nWith voice support ([@discordjs/opus](https://www.npmjs.com/package/@discordjs/opus)): `npm install discord.js @discordjs/opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discord.js opusscript`\n\n### Audio engines\n\nThe preferred audio engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus.\nUsing opusscript is only recommended for development environments where @discordjs/opus is tough to get working.\nFor production bots, using @discordjs/opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for WebSocket data compression and inflation (`npm install zlib-sync`)\n- [erlpack](https://github.com/discord/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install discord/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n  - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n  - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection (`npm install bufferutil`)\n- [utf-8-validate](https://www.npmjs.com/package/utf-8-validate) in combination with `bufferutil` for much faster WebSocket processing (`npm install utf-8-validate`)\n\n## Example usage\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n\n- [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n- [Documentation](https://discord.js.org/#/docs/main/master/general/welcome)\n- [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide)) - this is still for stable  \n  See also the WIP [Update Guide](https://discordjs.guide/additional-info/changes-in-v12.html) also including updated and removed items in the library.\n- [Discord.js Discord server](https://discord.gg/bRCvFy9)\n- [Discord API Discord server](https://discord.gg/discord-api)\n- [GitHub](https://github.com/discordjs/discord.js)\n- [NPM](https://www.npmjs.com/package/discord.js)\n- [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n\n- [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## Contributing\n\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Discord.js Server](https://discord.gg/bRCvFy9).\n",
                    "path": "docs/general/welcome.md"
                },
                "updating": {
                    "name": "Updating your code",
                    "type": "md",
                    "content": "# Version 12.0.0\n\nv12.0.0 contains many new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/12.0.0) for a full list of changes.\nYou can also visit [the guide](https://discordjs.guide/additional-info/changes-in-v12.html) for help with updating your v11 code to v12.\n\n# Version 11.1.0\n\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\n\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n\n- Message Reactions and Embeds (rich text)\n- Support for uws and erlpack for better performance\n- OAuthApplication support\n- Web distributions\n\n## Breaking changes\n\n### Client.login() no longer supports logging in with email + password\n\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\n\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\n\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\n\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\n\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\n\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60,\n});\n```\n\nv10 code example:\n\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60,\n});\n```\n\n## Presences\n\nPresences have been completely restructured.\nPrevious versions of discord.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 discord.js code may look something like this:\n\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\n\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\n\nMany events have been renamed or had their arguments change.\n\n### Client events\n\n| Version 9                                      | Version 10                              |\n| ---------------------------------------------- | --------------------------------------- |\n| guildMemberAdd(guild, member)                  | guildMemberAdd(member)                  |\n| guildMemberAvailable(guild, member)            | guildMemberAvailable(member)            |\n| guildMemberRemove(guild, member)               | guildMemberRemove(member)               |\n| guildMembersChunk(guild, members)              | guildMembersChunk(members)              |\n| guildMemberUpdate(guild, oldMember, newMember) | guildMemberUpdate(oldMember, newMember) |\n| guildRoleCreate(guild, role)                   | roleCreate(role)                        |\n| guildRoleDelete(guild, role)                   | roleDelete(role)                        |\n| guildRoleUpdate(guild, oldRole, newRole)       | roleUpdate(oldRole, newRole)            |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n\n| Version 9    | Version 10 |\n| ------------ | ---------- |\n| disconnected | disconnect |\n\n## Dates and timestamps\n\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:  \n**Date:** `Message.createdAt`  \n**Timestamp:** `Message.createdTimestamp`  \nSee the docs for each structure to see which date/timestamps are available on them.\n\n# Version 9\n\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n\n- `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  - `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n- `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n- `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n- `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n- `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n\n- `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n- `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\n\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({ limit: 100 }).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n",
                    "path": "docs/general/updating.md"
                },
                "faq": {
                    "name": "FAQ",
                    "type": "md",
                    "content": "# Frequently Asked Questions\n\nThese questions are some of the most frequently asked.\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\n\nUpdate to Node.js 12.0.0 or newer.\n\n## How do I get voice working?\n\n- Install FFMPEG.\n- Install either the `@discordjs/opus` package or the `opusscript` package.\n  @discordjs/opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n\n- **npm:** `npm install ffmpeg-static`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-static` or see the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up @discordjs/opus?\n\n- **Ubuntu:** Simply run `npm install @discordjs/opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install @discordjs/opus` in your bot's directory should successfully build it. Woo!\n\nOther questions can be found at the [official Discord.js guide](https://discordjs.guide/popular-topics/common-questions.html)\nIf you have issues not listed here or on the guide, feel free to ask in the [official Discord.js server](https://discord.gg/bRCvFy9).\nAlways make sure to read the [documentation](https://discord.js.org/#/docs/main/stable/general/welcome).\n",
                    "path": "docs/general/faq.md"
                }
            }
        },
        "topics": {
            "name": "Topics",
            "files": {
                "voice": {
                    "name": "Voice",
                    "type": "md",
                    "content": "# Introduction to Voice\n\nVoice in discord.js can be used for many things, such as music bots, recording or relaying audio.\n\nIn discord.js, you can use voice by connecting to a `VoiceChannel` to obtain a `VoiceConnection`, where you can start streaming and receiving audio.\n\nTo get started, make sure you have:\n\n- FFmpeg - `npm install ffmpeg-static`\n- an opus encoder, choose one from below:\n  - `npm install @discordjs/opus` (better performance)\n  - `npm install opusscript`\n- a good network connection\n\nThe preferred opus engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus.\nUsing opusscript is only recommended for development environments where @discordjs/opus is tough to get working.\nFor production bots, using @discordjs/opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n## Joining a voice channel\n\nThe example below reacts to a message and joins the sender's voice channel, catching any errors. This is important\nas it allows us to obtain a `VoiceConnection` that we can start to stream audio with.\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.login('token here');\n\nclient.on('message', async message => {\n  // Voice only works in guilds, if the message does not come from a guild,\n  // we ignore it\n  if (!message.guild) return;\n\n  if (message.content === '/join') {\n    // Only try to join the sender's voice channel if they are in one themselves\n    if (message.member.voice.channel) {\n      const connection = await message.member.voice.channel.join();\n    } else {\n      message.reply('You need to join a voice channel first!');\n    }\n  }\n});\n```\n\n## Streaming to a Voice Channel\n\nIn the previous example, we looked at how to join a voice channel in order to obtain a `VoiceConnection`. Now that we\nhave obtained a voice connection, we can start streaming audio to it.\n\n### Introduction to playing on voice connections\n\nThe most basic example of playing audio over a connection would be playing a local file:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3');\n```\n\nThe `dispatcher` in this case is a `StreamDispatcher` - here you can control the volume and playback of the stream:\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // half the volume\n\ndispatcher.on('finish', () => {\n  console.log('Finished playing!');\n});\n\ndispatcher.destroy(); // end the stream\n```\n\nWe can also pass in options when we first play the stream:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3', {\n  volume: 0.5,\n});\n```\n\n### What can I play?\n\nDiscord.js allows you to play a lot of things:\n\n```js\n// ReadableStreams, in this example YouTube audio\nconst ytdl = require('ytdl-core');\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));\n\n// Files on the internet\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n\n// Local files\nconnection.play('/home/discord/audio.mp3');\n```\n\nNew to v12 is the ability to play OggOpus and WebmOpus streams with much better performance by skipping out Ffmpeg. Note this comes at the cost of no longer having volume control over the stream:\n\n```js\nconnection.play(fs.createReadStream('./media.webm'), {\n  type: 'webm/opus',\n});\n\nconnection.play(fs.createReadStream('./media.ogg'), {\n  type: 'ogg/opus',\n});\n```\n\nMake sure to consult the documentation for a full list of what you can play - there's too much to cover here!\n\n## Voice Broadcasts\n\nA voice broadcast is very useful for \"radio\" bots, that play the same audio across multiple channels. It means audio is only transcoded once, and is much better on performance.\n\n```js\nconst broadcast = client.voice.createBroadcast();\n\nbroadcast.on('subscribe', dispatcher => {\n  console.log('New broadcast subscriber!');\n});\n\nbroadcast.on('unsubscribe', dispatcher => {\n  console.log('Channel unsubscribed from broadcast :(');\n});\n```\n\n`broadcast` is an instance of `VoiceBroadcast`, which has the same `play` method you are used to with regular VoiceConnections:\n\n```js\nconst dispatcher = broadcast.play('./audio.mp3');\n\nconnection.play(broadcast);\n```\n\nIt's important to note that the `dispatcher` stored above is a `BroadcastDispatcher` - it controls all the dispatcher subscribed to the broadcast, e.g. setting the volume of this dispatcher affects the volume of all subscribers.\n\n## Voice Receive\n\ncoming soon&trade;\n",
                    "path": "docs/topics/voice.md"
                },
                "web": {
                    "name": "Web builds",
                    "type": "md",
                    "content": "# Web builds\n\nIn addition to your usual Node applications, discord.js has special distributions available that are capable of running in web browsers.\nThis is useful for client-side web apps that need to interact with the Discord API.\n[Webpack 3](https://webpack.js.org/) is used to build these.\n\n## Restrictions\n\n- Any voice-related functionality is unavailable, as there is currently no audio encoding/decoding capabilities without external native libraries,\n  which web browsers do not support.\n- The ShardingManager cannot be used, since it relies on being able to spawn child processes for shards.\n- None of the native optional packages are usable.\n\n### Require Library\n\nIf you are making your own webpack project, you can require `discord.js/browser` wherever you need to use discord.js, like so:\n\n```js\nconst Discord = require('discord.js/browser');\n// do something with Discord like you normally would\n```\n\n### Webpack File\n\nYou can obtain your desired version of discord.js' web build from the [webpack branch](https://github.com/discordjs/discord.js/tree/webpack) of the GitHub repository.\nThere is a file for each branch and version of the library, and the ones ending in `.min.js` are minified to substantially reduce the size of the source code.\n\nInclude the file on the page just as you would any other JS library, like so:\n\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n\nRather than importing discord.js with `require('discord.js')`, the entire `Discord` object is available as a global (on the `window`) object.\nThe usage of the API isn't any different from using it in Node.js.\n\n#### Example\n\n```html\n<script type=\"text/javascript\" src=\"discord.11.1.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('some crazy token');\n</script>\n```\n",
                    "path": "docs/topics/web.md"
                },
                "partials": {
                    "name": "Partials",
                    "type": "md",
                    "content": "# Partials\n\nPartials allow you to receive events that contain uncached instances, providing structures that contain very minimal\ndata. For example, if you were to receive a `messageDelete` event with an uncached message, normally Discord.js would\ndiscard the event. With partials, you're able to receive the event, with a Message object that contains just an ID.\n\n## Opting in\n\nPartials are opt-in, and you can enable them in the Client options by specifying [PartialTypes](/#/docs/main/master/typedef/PartialType):\n\n```js\n// Accept partial messages, DM channels, and reactions when emitting events\nnew Client({ partials: ['MESSAGE', 'CHANNEL', 'REACTION'] });\n```\n\n## Usage & warnings\n\n<warn>The only guaranteed data a partial structure can store is its ID. All other properties/methods should be\nconsidered invalid/defunct while accessing a partial structure.</warn>\n\nAfter opting-in with the above, you begin to allow partial messages and channels in your caches, so it's important\nto check whether they're safe to access whenever you encounter them, whether it be in events or through normal cache\nusage.\n\nAll instance of structures that you opted-in for will have a `partial` property. As you'd expect, this value is `true`\nwhen the instance is partial. Partial structures are only guaranteed to contain an ID, any other properties and methods\nno longer carry their normal type guarantees.\n\nThis means you have to take time to consider possible parts of your program that might need checks put in place to\nprevent accessing partial data:\n\n```js\nclient.on('messageDelete', message => {\n  console.log(`${message.id} was deleted!`);\n  // Partial messages do not contain any content so skip them\n  if (!message.partial) {\n    console.log(`It had content: \"${message.content}\"`);\n  }\n});\n\n// You can also try to upgrade partials to full instances:\nclient.on('messageReactionAdd', async (reaction, user) => {\n  // If a message gains a reaction and it is uncached, fetch and cache the message\n  // You should account for any errors while fetching, it could return API errors if the resource is missing\n  if (reaction.message.partial) await reaction.message.fetch();\n  // Now the message has been cached and is fully available:\n  console.log(`${reaction.message.author}'s message \"${reaction.message.content}\" gained a reaction!`);\n  // Fetches and caches the reaction itself, updating resources that were possibly defunct.\n  if (reaction.partial) await reaction.fetch();\n  // Now the reaction is fully available and the properties will be reflected accurately:\n  console.log(`${reaction.count} user(s) have given the same reaction to this message!`);\n});\n```\n\n<info>If a message is deleted and both the message and channel are uncached, you must enable both 'MESSAGE' and\n'CHANNEL' in the client options to receive the messageDelete event.</info>\n\n## Why?\n\nThis allows developers to listen to events that contain uncached data, which is useful if you're running a moderation\nbot or any bot that relies on still receiving updates to resources you don't have cached -- message reactions are a\ngood example.\n\nCurrently, the only type of channel that can be uncached is a DM channel, there is no reason why guild channels should\nnot be cached.\n",
                    "path": "docs/topics/partials.md"
                }
            }
        },
        "examples": {
            "name": "Examples",
            "files": {
                "ping": {
                    "name": "Ping",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/ping.js"
                },
                "avatars": {
                    "name": "Avatars",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * Send a user a link to their avatar\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/avatars.js"
                },
                "attachments": {
                    "name": "Attachments",
                    "type": "md",
                    "content": "# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [MessageAttachment](/#/docs/main/master/class/MessageAttachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!rip'\n  if (message.content === '!rip') {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n    // Send the attachment in the message channel\n    message.channel.send(attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/master/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!rip'\n  if (message.content === '!rip') {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author},`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [MessageAttachment](/#/docs/main/master/class/MessageAttachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!rip'\n  if (message.content === '!rip') {\n    // Create the attachment using MessageAttachment\n    const attachment = new MessageAttachment('./rip.png');\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author},`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example2.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Import the native fs module\nconst fs = require('fs');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is '!memes'\n  if (message.content === '!memes') {\n    // Get the buffer from the 'memes.txt', assuming that the file exists\n    const buffer = fs.readFileSync('./memes.txt');\n\n    /**\n     * Create the attachment using MessageAttachment,\n     * overwritting the default file name to 'memes.txt'\n     * Read more about it over at\n     * http://discord.js.org/#/docs/main/master/class/MessageAttachment\n     */\n    const attachment = new MessageAttachment(buffer, 'memes.txt');\n    // Send the attachment in the message channel with a content\n    message.channel.send(`${message.author}, here are your memes!`, attachment);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n",
                    "path": "docs/examples/attachments.md"
                },
                "greeting": {
                    "name": "Server greeting",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * A bot that welcomes new guild members when they join\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.cache.find(ch => ch.name === 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/greeting.js"
                },
                "embed": {
                    "name": "Message Embed",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * An example of how you can send embeds\n */\n\n// Extract the required classes from the discord.js module\nconst { Client, MessageEmbed } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is \"how to embed\"\n  if (message.content === 'how to embed') {\n    // We can create embeds using the MessageEmbed constructor\n    // Read more about all that you can do with the constructor\n    // over at https://discord.js.org/#/docs/main/master/class/MessageEmbed\n    const embed = new MessageEmbed()\n      // Set the title of the field\n      .setTitle('A slick little embed')\n      // Set the color of the embed\n      .setColor(0xff0000)\n      // Set the main content of the embed\n      .setDescription('Hello, this is a slick embed!');\n    // Send the embed to the same channel as the message\n    message.channel.send(embed);\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n",
                    "path": "docs/examples/embed.js"
                },
                "moderation": {
                    "name": "Moderation",
                    "type": "md",
                    "content": "# Moderation\n\nIn here, you'll see some basic examples for kicking and banning a member.\n\n## Kicking a member\n\nLet's say you have a member that you'd like to kick. Here is an example of how you _can_ do it.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Kick the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         */\n        member\n          .kick('Optional reason that will display in the audit logs')\n          .then(() => {\n            // We let the message author know we were able to kick the person\n            message.reply(`Successfully kicked ${user.tag}`);\n          })\n          .catch(err => {\n            // An error happened\n            // This is generally due to the bot not being able to kick the member,\n            // either due to missing permissions or role hierarchy\n            message.reply('I was unable to kick the member');\n            // Log the error\n            console.error(err);\n          });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply(\"That user isn't in this guild!\");\n      }\n      // Otherwise, if no user was mentioned\n    } else {\n      message.reply(\"You didn't mention the user to kick!\");\n    }\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/kick-example.png)\n\n## Banning a member\n\nBanning works the same way as kicking, but it has slightly more options that can be changed.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Ban the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         * Read more about what ban options there are over at\n         * https://discord.js.org/#/docs/main/master/class/GuildMember?scrollTo=ban\n         */\n        member\n          .ban({\n            reason: 'They were bad!',\n          })\n          .then(() => {\n            // We let the message author know we were able to ban the person\n            message.reply(`Successfully banned ${user.tag}`);\n          })\n          .catch(err => {\n            // An error happened\n            // This is generally due to the bot not being able to ban the member,\n            // either due to missing permissions or role hierarchy\n            message.reply('I was unable to ban the member');\n            // Log the error\n            console.error(err);\n          });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply(\"That user isn't in this guild!\");\n      }\n    } else {\n      // Otherwise, if no user was mentioned\n      message.reply(\"You didn't mention the user to ban!\");\n    }\n  }\n});\n\n// Log our bot in using the token from https://discord.com/developers/applications\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)\n",
                    "path": "docs/examples/moderation.md"
                },
                "webhook": {
                    "name": "Webhook",
                    "type": "js",
                    "content": "'use strict';\n\n/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n/*\n * Create a new webhook\n * The Webhooks ID and token can be found in the URL, when you request that URL, or in the response body.\n * https://discord.com/api/webhooks/12345678910/T0kEn0fw3Bh00K\n *                                  ^^^^^^^^^^  ^^^^^^^^^^^^ \n *                                  Webhook ID  Webhook Token\n */\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n",
                    "path": "docs/examples/webhook.js"
                }
            }
        }
    },
    "classes": [
        {
            "name": "BaseClient",
            "description": "The base class for all clients.",
            "extends": [
                [
                    [
                        "EventEmitter"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "_timeouts",
                    "description": "Timeouts set by {@link BaseClient#setTimeout} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Timeout",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 22,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_intervals",
                    "description": "Intervals set by {@link BaseClient#setInterval} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Timeout",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 29,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_immediates",
                    "description": "Intervals set by {@link BaseClient#setImmediate} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Immediate",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 36,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "options",
                    "description": "The options the client was instantiated with",
                    "type": [
                        [
                            [
                                "ClientOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 42,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "rest",
                    "description": "The REST manager of the client",
                    "access": "private",
                    "type": [
                        [
                            [
                                "RESTManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 49,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "api",
                    "description": "API shortcut",
                    "access": "private",
                    "readonly": true,
                    "type": [
                        [
                            [
                                "Object"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 58,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "description": "Destroys all assets used by the base client.",
                    "meta": {
                        "line": 65,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setTimeout",
                    "description": "Sets a timeout that will be automatically cancelled if the client is destroyed.",
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "delay",
                            "description": "Time to wait before executing (in milliseconds)",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Timeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 81,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearTimeout",
                    "description": "Clears a timeout.",
                    "params": [
                        {
                            "name": "timeout",
                            "description": "Timeout to cancel",
                            "type": [
                                [
                                    [
                                        "Timeout"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 94,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setInterval",
                    "description": "Sets an interval that will be automatically cancelled if the client is destroyed.",
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "delay",
                            "description": "Time to wait between executions (in milliseconds)",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Timeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 106,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearInterval",
                    "description": "Clears an interval.",
                    "params": [
                        {
                            "name": "interval",
                            "description": "Interval to cancel",
                            "type": [
                                [
                                    [
                                        "Timeout"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 116,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setImmediate",
                    "description": "Sets an immediate that will be automatically cancelled if the client is destroyed.",
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Immediate"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 127,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearImmediate",
                    "description": "Clears an immediate.",
                    "params": [
                        {
                            "name": "immediate",
                            "description": "Immediate to cancel",
                            "type": [
                                [
                                    [
                                        "Immediate"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 137,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "incrementMaxListeners",
                    "description": "Increments max listeners by one, if they are not zero.",
                    "access": "private",
                    "meta": {
                        "line": 146,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "decrementMaxListeners",
                    "description": "Decrements max listeners by one, if they are not zero.",
                    "access": "private",
                    "meta": {
                        "line": 157,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                }
            ],
            "meta": {
                "line": 13,
                "file": "BaseClient.js",
                "path": "src/client"
            }
        },
        {
            "name": "Client",
            "description": "The main hub for interacting with the Discord API, and the starting point for any bot.",
            "extends": [
                [
                    [
                        "BaseClient"
                    ]
                ]
            ],
            "construct": {
                "name": "Client",
                "params": [
                    {
                        "name": "options",
                        "description": "Options for the client",
                        "optional": true,
                        "type": [
                            [
                                [
                                    "ClientOptions"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "props": [
                {
                    "name": "ws",
                    "description": "The WebSocket manager of the client",
                    "type": [
                        [
                            [
                                "WebSocketManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 82,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "actions",
                    "description": "The action manager of the client",
                    "access": "private",
                    "type": [
                        [
                            [
                                "ActionsManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 89,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "voice",
                    "description": "The voice manager of the client (`null` in browsers)",
                    "nullable": true,
                    "type": [
                        [
                            [
                                "ClientVoiceManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 95,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "shard",
                    "description": "Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})",
                    "nullable": true,
                    "type": [
                        [
                            [
                                "ShardClientUtil"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 101,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "users",
                    "description": "All of the {@link User} objects that have been cached at any point, mapped by their IDs",
                    "type": [
                        [
                            [
                                "UserManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 110,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "guilds",
                    "description": "All of the guilds the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* guild the bot is a member of",
                    "type": [
                        [
                            [
                                "GuildManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 117,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "channels",
                    "description": "All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* channel in *every* guild the bot\nis a member of. Note that DM channels will not be initially cached, and thus not be present\nin the Manager without their explicit fetching or use.",
                    "type": [
                        [
                            [
                                "ChannelManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 126,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "presence",
                    "description": "The presence of the Client",
                    "access": "private",
                    "type": [
                        [
                            [
                                "ClientPresence"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 134,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "token",
                    "description": "Authorization token for the logged in bot.\nIf present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n<warn>This should be kept private at all times.</warn>",
                    "nullable": true,
                    "type": [
                        [
                            [
                                "string"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 144,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "user",
                    "description": "User that the client is logged in as",
                    "nullable": true,
                    "type": [
                        [
                            [
                                "ClientUser"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 153,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "readyAt",
                    "description": "Time at which the client was last regarded as being in the `READY` state\n(each time the client disconnects and successfully reconnects, this will be overwritten)",
                    "nullable": true,
                    "type": [
                        [
                            [
                                "Date"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 160,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "emojis",
                    "description": "All custom emojis that the client has access to, mapped by their IDs",
                    "readonly": true,
                    "type": [
                        [
                            [
                                "GuildEmojiManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 172,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "readyTimestamp",
                    "description": "Timestamp of the time the client was last `READY` at",
                    "readonly": true,
                    "nullable": true,
                    "type": [
                        [
                            [
                                "number"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 185,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "uptime",
                    "description": "How long it has been since the client last entered the `READY` state in milliseconds",
                    "readonly": true,
                    "nullable": true,
                    "type": [
                        [
                            [
                                "number"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 194,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_timeouts",
                    "description": "Timeouts set by {@link BaseClient#setTimeout} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Timeout",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 22,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_intervals",
                    "description": "Intervals set by {@link BaseClient#setInterval} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Timeout",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 29,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_immediates",
                    "description": "Intervals set by {@link BaseClient#setImmediate} that are still active",
                    "access": "private",
                    "type": [
                        [
                            [
                                "Set",
                                "<"
                            ],
                            [
                                "Immediate",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 36,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "options",
                    "description": "The options the client was instantiated with",
                    "type": [
                        [
                            [
                                "ClientOptions"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 42,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "rest",
                    "description": "The REST manager of the client",
                    "access": "private",
                    "type": [
                        [
                            [
                                "RESTManager"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 49,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "api",
                    "description": "API shortcut",
                    "access": "private",
                    "readonly": true,
                    "type": [
                        [
                            [
                                "Object"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 58,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "description": "Logs the client in, establishing a websocket connection to Discord.",
                    "examples": [
                        "client.login('my token');"
                    ],
                    "params": [
                        {
                            "name": "token",
                            "description": "Token of the account to log in with",
                            "optional": true,
                            "default": "this.token",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "Promise",
                                    "<"
                                ],
                                [
                                    "string",
                                    ">"
                                ]
                            ]
                        ],
                        "description": "Token of the account used"
                    },
                    "meta": {
                        "line": 205,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "destroy",
                    "description": "Logs out, terminates the connection to Discord, and destroys the client.",
                    "returns": [
                        [
                            [
                                "void"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 235,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "fetchInvite",
                    "description": "Obtains an invite from Discord.",
                    "examples": [
                        "client.fetchInvite('https://discord.gg/bRCvFy9')\n  .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n  .catch(console.error);"
                    ],
                    "params": [
                        {
                            "name": "invite",
                            "description": "Invite code or URL",
                            "type": [
                                [
                                    [
                                        "InviteResolvable"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "Invite",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 250,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "fetchGuildTemplate",
                    "description": "Obtains a template from Discord.",
                    "examples": [
                        "client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n  .then(template => console.log(`Obtained template with code: ${template.code}`))\n  .catch(console.error);"
                    ],
                    "params": [
                        {
                            "name": "template",
                            "description": "Template code or URL",
                            "type": [
                                [
                                    [
                                        "GuildTemplateResolvable"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "GuildTemplate",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 267,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "fetchWebhook",
                    "description": "Obtains a webhook from Discord.",
                    "examples": [
                        "client.fetchWebhook('id', 'token')\n  .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n  .catch(console.error);"
                    ],
                    "params": [
                        {
                            "name": "id",
                            "description": "ID of the webhook",
                            "type": [
                                [
                                    [
                                        "Snowflake"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "token",
                            "description": "Token for the webhook",
                            "optional": true,
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "Webhook",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 285,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "fetchVoiceRegions",
                    "description": "Obtains the available voice regions from Discord.",
                    "examples": [
                        "client.fetchVoiceRegions()\n  .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n  .catch(console.error);"
                    ],
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "Collection",
                                "<"
                            ],
                            [
                                "string",
                                ", "
                            ],
                            [
                                "VoiceRegion",
                                ">>"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 300,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "sweepMessages",
                    "description": "Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\nIf the message has been edited, the time of the edit is used rather than the time of the original message.",
                    "examples": [
                        "// Remove all messages older than 1800 seconds from the messages cache\nconst amount = client.sweepMessages(1800);\nconsole.log(`Successfully removed ${amount} messages from the cache.`);"
                    ],
                    "params": [
                        {
                            "name": "lifetime",
                            "description": "Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}",
                            "optional": true,
                            "default": "this.options.messageCacheLifetime",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "number"
                                ]
                            ]
                        ],
                        "description": "Amount of messages that were removed from the caches,\nor -1 if the message cache lifetime is unlimited"
                    },
                    "meta": {
                        "line": 320,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "fetchApplication",
                    "description": "Obtains the OAuth Application of this bot from Discord.",
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "ClientApplication",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 354,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "fetchGuildPreview",
                    "description": "Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild to fetch the preview for",
                            "type": [
                                [
                                    [
                                        "GuildResolvable"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "GuildPreview",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 366,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "generateInvite",
                    "description": "Generates a link that can be used to invite the bot to a guild.",
                    "examples": [
                        "client.generateInvite({\n  permissions: ['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'],\n})\n  .then(link => console.log(`Generated bot invite link: ${link}`))\n  .catch(console.error);"
                    ],
                    "params": [
                        {
                            "name": "options",
                            "description": "Permissions to request",
                            "optional": true,
                            "type": [
                                [
                                    [
                                        "InviteGenerationOptions"
                                    ]
                                ],
                                [
                                    [
                                        "PermissionResolvable"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "string",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 386,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_eval",
                    "description": "Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\nwith the client as `this`.",
                    "access": "private",
                    "params": [
                        {
                            "name": "script",
                            "description": "Script to eval",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            "*"
                        ]
                    ],
                    "meta": {
                        "line": 424,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "_validateOptions",
                    "description": "Validates the client options.",
                    "access": "private",
                    "params": [
                        {
                            "name": "options",
                            "description": "Options to validate",
                            "optional": true,
                            "default": "this.options",
                            "type": [
                                [
                                    [
                                        "ClientOptions"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 433,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setTimeout",
                    "description": "Sets a timeout that will be automatically cancelled if the client is destroyed.",
                    "inherits": "BaseClient#setTimeout",
                    "inherited": true,
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "delay",
                            "description": "Time to wait before executing (in milliseconds)",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Timeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 81,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearTimeout",
                    "description": "Clears a timeout.",
                    "inherits": "BaseClient#clearTimeout",
                    "inherited": true,
                    "params": [
                        {
                            "name": "timeout",
                            "description": "Timeout to cancel",
                            "type": [
                                [
                                    [
                                        "Timeout"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 94,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setInterval",
                    "description": "Sets an interval that will be automatically cancelled if the client is destroyed.",
                    "inherits": "BaseClient#setInterval",
                    "inherited": true,
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "delay",
                            "description": "Time to wait between executions (in milliseconds)",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Timeout"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 106,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearInterval",
                    "description": "Clears an interval.",
                    "inherits": "BaseClient#clearInterval",
                    "inherited": true,
                    "params": [
                        {
                            "name": "interval",
                            "description": "Interval to cancel",
                            "type": [
                                [
                                    [
                                        "Timeout"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 116,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "setImmediate",
                    "description": "Sets an immediate that will be automatically cancelled if the client is destroyed.",
                    "inherits": "BaseClient#setImmediate",
                    "inherited": true,
                    "params": [
                        {
                            "name": "fn",
                            "description": "Function to execute",
                            "type": [
                                [
                                    [
                                        "function"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "args",
                            "description": "Arguments for the function",
                            "variable": true,
                            "type": [
                                [
                                    "*"
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Immediate"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 127,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "clearImmediate",
                    "description": "Clears an immediate.",
                    "inherits": "BaseClient#clearImmediate",
                    "inherited": true,
                    "params": [
                        {
                            "name": "immediate",
                            "description": "Immediate to cancel",
                            "type": [
                                [
                                    [
                                        "Immediate"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 137,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "incrementMaxListeners",
                    "description": "Increments max listeners by one, if they are not zero.",
                    "access": "private",
                    "inherits": "BaseClient#incrementMaxListeners",
                    "inherited": true,
                    "meta": {
                        "line": 146,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "decrementMaxListeners",
                    "description": "Decrements max listeners by one, if they are not zero.",
                    "access": "private",
                    "inherits": "BaseClient#decrementMaxListeners",
                    "inherited": true,
                    "meta": {
                        "line": 157,
                        "file": "BaseClient.js",
                        "path": "src/client"
                    }
                }
            ],
            "events": [
                {
                    "name": "channelCreate",
                    "description": "Emitted whenever a channel is created.",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The channel that was created",
                            "type": [
                                [
                                    [
                                        "DMChannel"
                                    ]
                                ],
                                [
                                    [
                                        "GuildChannel"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 12,
                        "file": "ChannelCreate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "channelDelete",
                    "description": "Emitted whenever a channel is deleted.",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The channel that was deleted",
                            "type": [
                                [
                                    [
                                        "DMChannel"
                                    ]
                                ],
                                [
                                    [
                                        "GuildChannel"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 25,
                        "file": "ChannelDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildBanRemove",
                    "description": "Emitted whenever a member is unbanned from a guild.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild that the unban occurred in",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "user",
                            "description": "The user that was unbanned",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 11,
                        "file": "GuildBanRemove.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildUnavailable",
                    "description": "Emitted whenever a guild becomes unavailable, likely due to a server outage.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild that has become unavailable",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 25,
                        "file": "GuildDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildDelete",
                    "description": "Emitted whenever a guild kicks the client or the guild is deleted/left.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild that was deleted",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 46,
                        "file": "GuildDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "emojiCreate",
                    "description": "Emitted whenever a custom emoji is created in a guild.",
                    "params": [
                        {
                            "name": "emoji",
                            "description": "The emoji that was created",
                            "type": [
                                [
                                    [
                                        "GuildEmoji"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 10,
                        "file": "GuildEmojiCreate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "emojiDelete",
                    "description": "Emitted whenever a custom emoji is deleted in a guild.",
                    "params": [
                        {
                            "name": "emoji",
                            "description": "The emoji that was deleted",
                            "type": [
                                [
                                    [
                                        "GuildEmoji"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 10,
                        "file": "GuildEmojiDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "emojiUpdate",
                    "description": "Emitted whenever a custom emoji is updated in a guild.",
                    "params": [
                        {
                            "name": "oldEmoji",
                            "description": "The old emoji",
                            "type": [
                                [
                                    [
                                        "GuildEmoji"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newEmoji",
                            "description": "The new emoji",
                            "type": [
                                [
                                    [
                                        "GuildEmoji"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 9,
                        "file": "GuildEmojiUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildIntegrationsUpdate",
                    "description": "Emitted whenever a guild integration is updated",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild whose integrations were updated",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 10,
                        "file": "GuildIntegrationsUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildMemberRemove",
                    "description": "Emitted whenever a member leaves a guild, or is kicked.",
                    "params": [
                        {
                            "name": "member",
                            "description": "The member that has left/been kicked from the guild",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 17,
                        "file": "GuildMemberRemove.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildMemberUpdate",
                    "description": "Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\nAlso emitted when the user's details (e.g. username) change.",
                    "params": [
                        {
                            "name": "oldMember",
                            "description": "The member before the update",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newMember",
                            "description": "The member after the update",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 23,
                        "file": "GuildMemberUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildMemberAvailable",
                    "description": "Emitted whenever a member becomes available in a large guild.",
                    "params": [
                        {
                            "name": "member",
                            "description": "The member that became available",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 33,
                        "file": "GuildMemberUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "roleCreate",
                    "description": "Emitted whenever a role is created.",
                    "params": [
                        {
                            "name": "role",
                            "description": "The role that was created",
                            "type": [
                                [
                                    [
                                        "Role"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 14,
                        "file": "GuildRoleCreate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "roleDelete",
                    "description": "Emitted whenever a guild role is deleted.",
                    "params": [
                        {
                            "name": "role",
                            "description": "The role that was deleted",
                            "type": [
                                [
                                    [
                                        "Role"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 17,
                        "file": "GuildRoleDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "roleUpdate",
                    "description": "Emitted whenever a guild role is updated.",
                    "params": [
                        {
                            "name": "oldRole",
                            "description": "The role before the update",
                            "type": [
                                [
                                    [
                                        "Role"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newRole",
                            "description": "The role after the update",
                            "type": [
                                [
                                    [
                                        "Role"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 17,
                        "file": "GuildRoleUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "guildUpdate",
                    "description": "Emitted whenever a guild is updated - e.g. name change.",
                    "params": [
                        {
                            "name": "oldGuild",
                            "description": "The guild before the update",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newGuild",
                            "description": "The guild after the update",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 13,
                        "file": "GuildUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "inviteCreate",
                    "description": "Emitted when an invite is created.\n<info> This event only triggers if the client has `MANAGE_GUILD` permissions for the guild,\nor `MANAGE_CHANNEL` permissions for the channel.</info>",
                    "params": [
                        {
                            "name": "invite",
                            "description": "The invite that was created",
                            "type": [
                                [
                                    [
                                        "Invite"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 16,
                        "file": "InviteCreate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "inviteDelete",
                    "description": "Emitted when an invite is deleted.\n<info> This event only triggers if the client has `MANAGE_GUILD` permissions for the guild,\nor `MANAGE_CHANNEL` permissions for the channel.</info>",
                    "params": [
                        {
                            "name": "invite",
                            "description": "The invite that was deleted",
                            "type": [
                                [
                                    [
                                        "Invite"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 17,
                        "file": "InviteDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "message",
                    "description": "Emitted whenever a message is created.",
                    "params": [
                        {
                            "name": "message",
                            "description": "The created message",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 26,
                        "file": "MessageCreate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "messageDelete",
                    "description": "Emitted whenever a message is deleted.",
                    "params": [
                        {
                            "name": "message",
                            "description": "The deleted message",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 16,
                        "file": "MessageDelete.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "messageDeleteBulk",
                    "description": "Emitted whenever messages are deleted in bulk.",
                    "params": [
                        {
                            "name": "messages",
                            "description": "The deleted messages, mapped by their ID",
                            "type": [
                                [
                                    [
                                        "Collection",
                                        "<"
                                    ],
                                    [
                                        "Snowflake",
                                        ", "
                                    ],
                                    [
                                        "Message",
                                        ">"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 31,
                        "file": "MessageDeleteBulk.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "messageReactionAdd",
                    "description": "Emitted whenever a reaction is added to a cached message.",
                    "params": [
                        {
                            "name": "messageReaction",
                            "description": "The reaction object",
                            "type": [
                                [
                                    [
                                        "MessageReaction"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "user",
                            "description": "The user that applied the guild or reaction emoji",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 43,
                        "file": "MessageReactionAdd.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "messageReactionRemove",
                    "description": "Emitted whenever a reaction is removed from a cached message.",
                    "params": [
                        {
                            "name": "messageReaction",
                            "description": "The reaction object",
                            "type": [
                                [
                                    [
                                        "MessageReaction"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "user",
                            "description": "The user whose emoji or reaction emoji was removed",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 33,
                        "file": "MessageReactionRemove.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "messageReactionRemoveAll",
                    "description": "Emitted whenever all reactions are removed from a cached message.",
                    "params": [
                        {
                            "name": "message",
                            "description": "The message the reactions were removed from",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 23,
                        "file": "MessageReactionRemoveAll.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "messageReactionRemoveEmoji",
                    "description": "Emitted when a bot removes an emoji reaction from a cached message.",
                    "params": [
                        {
                            "name": "reaction",
                            "description": "The reaction that was removed",
                            "type": [
                                [
                                    [
                                        "MessageReaction"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 18,
                        "file": "MessageReactionRemoveEmoji.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "presenceUpdate",
                    "description": "Emitted whenever a guild member's presence (e.g. status, activity) is changed.",
                    "params": [
                        {
                            "name": "oldPresence",
                            "description": "The presence before the update, if one at all",
                            "nullable": true,
                            "type": [
                                [
                                    [
                                        "Presence"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newPresence",
                            "description": "The presence after the update",
                            "type": [
                                [
                                    [
                                        "Presence"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 33,
                        "file": "PresenceUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "typingStart",
                    "description": "Emitted whenever a user starts typing in a channel.",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The channel the user started typing in",
                            "type": [
                                [
                                    [
                                        "Channel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "user",
                            "description": "The user that started typing",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 40,
                        "file": "TypingStart.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "userUpdate",
                    "description": "Emitted whenever a user's details (e.g. username) are changed.\nTriggered by the Discord gateway events USER_UPDATE, GUILD_MEMBER_UPDATE, and PRESENCE_UPDATE.",
                    "params": [
                        {
                            "name": "oldUser",
                            "description": "The user before the update",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newUser",
                            "description": "The user after the update",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 14,
                        "file": "UserUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "voiceStateUpdate",
                    "description": "Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.",
                    "params": [
                        {
                            "name": "oldState",
                            "description": "The voice state before the update",
                            "type": [
                                [
                                    [
                                        "VoiceState"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newState",
                            "description": "The voice state after the update",
                            "type": [
                                [
                                    [
                                        "VoiceState"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 34,
                        "file": "VoiceStateUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "webhookUpdate",
                    "description": "Emitted whenever a guild text channel has its webhooks changed.",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The channel that had a webhook update",
                            "type": [
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 10,
                        "file": "WebhooksUpdate.js",
                        "path": "src/client/actions"
                    }
                },
                {
                    "name": "warn",
                    "description": "Emitted for general warnings.",
                    "params": [
                        {
                            "name": "info",
                            "description": "The warning",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 494,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "debug",
                    "description": "Emitted for general debugging information.",
                    "params": [
                        {
                            "name": "info",
                            "description": "The debug information",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 500,
                        "file": "Client.js",
                        "path": "src/client"
                    }
                },
                {
                    "name": "guildMemberSpeaking",
                    "description": "Emitted once a guild member changes speaking state.",
                    "params": [
                        {
                            "name": "member",
                            "description": "The member that started/stopped speaking",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "speaking",
                            "description": "The speaking state of the member",
                            "type": [
                                [
                                    [
                                        "Readonly",
                                        "<"
                                    ],
                                    [
                                        "Speaking",
                                        ">"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 510,
                        "file": "VoiceConnection.js",
                        "path": "src/client/voice"
                    }
                },
                {
                    "name": "channelPinsUpdate",
                    "description": "Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\nnot much information can be provided easily here - you need to manually check the pins yourself.",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The channel that the pins update occurred in",
                            "type": [
                                [
                                    [
                                        "DMChannel"
                                    ]
                                ],
                                [
                                    [
                                        "TextChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "time",
                            "description": "The time of the pins update",
                            "type": [
                                [
                                    [
                                        "Date"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 13,
                        "file": "CHANNEL_PINS_UPDATE.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "channelUpdate",
                    "description": "Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.",
                    "params": [
                        {
                            "name": "oldChannel",
                            "description": "The channel before the update",
                            "type": [
                                [
                                    [
                                        "DMChannel"
                                    ]
                                ],
                                [
                                    [
                                        "GuildChannel"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newChannel",
                            "description": "The channel after the update",
                            "type": [
                                [
                                    [
                                        "DMChannel"
                                    ]
                                ],
                                [
                                    [
                                        "GuildChannel"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 8,
                        "file": "CHANNEL_UPDATE.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "guildBanAdd",
                    "description": "Emitted whenever a member is banned from a guild.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild that the ban occurred in",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "user",
                            "description": "The user that was banned",
                            "type": [
                                [
                                    [
                                        "User"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 9,
                        "file": "GUILD_BAN_ADD.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "guildCreate",
                    "description": "Emitted whenever the client joins a guild.",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The created guild",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 23,
                        "file": "GUILD_CREATE.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "guildMemberAdd",
                    "description": "Emitted whenever a user joins a guild.",
                    "params": [
                        {
                            "name": "member",
                            "description": "The member that has joined a guild",
                            "type": [
                                [
                                    [
                                        "GuildMember"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 11,
                        "file": "GUILD_MEMBER_ADD.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "guildMembersChunk",
                    "description": "Emitted whenever a chunk of guild members is received (all members come from the same guild).",
                    "params": [
                        {
                            "name": "members",
                            "description": "The members in the chunk",
                            "type": [
                                [
                                    [
                                        "Collection",
                                        "<"
                                    ],
                                    [
                                        "Snowflake",
                                        ", "
                                    ],
                                    [
                                        "GuildMember",
                                        ">"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "The guild related to the member chunk",
                            "type": [
                                [
                                    [
                                        "Guild"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "chunk",
                            "description": "Properties of the received chunk",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "chunk.index",
                            "description": "Index of the received chunk",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "chunk.count",
                            "description": "Number of chunks the client should receive",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "chunk.nonce",
                            "description": "Nonce for this chunk",
                            "nullable": true,
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 15,
                        "file": "GUILD_MEMBERS_CHUNK.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "messageUpdate",
                    "description": "Emitted whenever a message is updated - e.g. embed or content change.",
                    "params": [
                        {
                            "name": "oldMessage",
                            "description": "The message before the update",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "newMessage",
                            "description": "The message after the update",
                            "type": [
                                [
                                    [
                                        "Message"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 8,
                        "file": "MESSAGE_UPDATE.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "shardResume",
                    "description": "Emitted when a shard resumes successfully.",
                    "params": [
                        {
                            "name": "id",
                            "description": "The shard ID that resumed",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "replayedEvents",
                            "description": "The amount of replayed events",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 7,
                        "file": "RESUMED.js",
                        "path": "src/client/websocket/handlers"
                    }
                },
                {
                    "name": "shardReady",
                    "description": "Emitted when a shard turns ready.",
                    "params": [
                        {
                            "name": "id",
                            "description": "The shard ID that turned ready",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "unavailableGuilds",
                            "description": "Set of unavailable guild IDs, if any",
                            "nullable": true,
                            "type": [
                                [
                                    [
                                        "Set",
                                        "<"
                                    ],
                                    [
                                        "string",
                                        ">"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 188,
                        "file": "WebSocketManager.js",
                        "path": "src/client/websocket"
                    }
                },
                {
                    "name": "shardDisconnect",
                    "description": "Emitted when a shard's WebSocket disconnects and will no longer reconnect.",
                    "params": [
                        {
                            "name": "event",
                            "description": "The WebSocket close event",
                            "type": [
                                [
                                    [
                                        "CloseEvent"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "id",
                            "description": "The shard ID that disconnected",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 202,
                        "file": "WebSocketManager.js",
                        "path": "src/client/websocket"
                    }
                },
                {
                    "name": "shardReconnecting",
                    "description": "Emitted when a shard is attempting to reconnect or re-identify.",
                    "params": [
                        {
                            "name": "id",
                            "description": "The shard ID that is attempting to reconnect",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 218,
                        "file": "WebSocketManager.js",
                        "path": "src/client/websocket"
                    }
                },
                {
                    "name": "invalidated",
                    "description": "Emitted when the client's session becomes invalidated.\nYou are expected to handle closing the process gracefully and preventing a boot loop\nif you are listening to this event.",
                    "meta": {
                        "line": 300,
                        "file": "WebSocketManager.js",
                        "path": "src/client/websocket"
                    }
                },
                {
                    "name": "ready",
                    "description": "Emitted when the client becomes ready to start working.",
                    "meta": {
                        "line": 427,
                        "file": "WebSocketManager.js",
                        "path": "src/client/websocket"
                    }
                },
                {
                    "name": "shardError",
                    "description": "Emitted whenever a shard's WebSocket encounters a connection error.",
                    "params": [
                        {
                            "name": "error",
                            "description": "The encountered error",
                            "type": [
                                [
                                    [
                                        "Error"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "shardID",
                            "description": "The shard that encountered this error",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 313,
                        "file": "WebSocketShard.js",
                        "path": "src/client/websocket"
                    }
                },
                {
                    "name": "rateLimit",
                    "description": "Emitted when the client hits a rate limit while making a request",
                    "params": [
                        {
                            "name": "rateLimitInfo",
                            "description": "Object containing the rate limit info",
                            "type": [
                                [
                                    [
                                        "Object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "rateLimitInfo.timeout",
                            "description": "Timeout in ms",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "rateLimitInfo.limit",
                            "description": "Number of requests that can be made to this endpoint",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "rateLimitInfo.method",
                            "description": "HTTP method used for request that triggered this event",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "rateLimitInfo.path",
                            "description": "Path used for request that triggered this event",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "rateLimitInfo.route",
                            "description": "Route used for request that triggered this event",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 59,
                        "file": "RequestHandler.js",
                        "path": "src/rest"
                    }
                },
                {
                    "name": "error",
                    "description": "Emitted when the client encounters an error.",
                    "params": [
                        {
                            "name": "error",
                            "description": "The error encountered",
                            "type": [
                                [
                                    [
                                        "Error"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "meta": {
                        "line": 203,
                        "file": "ShardClientUtil.js",
                        "path": "src/sharding"
                    }
                }
            ],
            "meta": {
                "line": 30,
                "file": "Client.js",
                "path": "src/client"
            }
        },
        {
            "name": "ClientVoiceManager",
            "description": "Manages voice connections for the client",
            "props": [
                {
                    "name": "client",
                    "description": "The client that instantiated this voice manager",
                    "readonly": true,
                    "type": [
                        [
                            [
                                "Client"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 13,
                        "file": "ClientVoiceManager.js",
                        "path": "src/client/voice"
                    }
                },
                {
                    "name": "connections",
                    "description": "A collection mapping connection IDs to the Connection objects",
                    "type": [
                        [
                            [
                                "Collection",
                                "<"
                            ],
                            [
                                "Snowflake",
                                ", "
                            ],
                            [
                                "VoiceConnection",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 25,
                        "file": "ClientVoiceManager.js",
                        "path": "src/client/voice"
                    }
                },
                {
                    "name": "broadcasts",
                    "description": "Active voice broadcasts that have been created",
                    "type": [
                        [
                            [
                                "Array",
                                "<"
                            ],
                            [
                                "VoiceBroadcast",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 31,
                        "file": "ClientVoiceManager.js",
                        "path": "src/client/voice"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createBroadcast",
                    "description": "Creates a voice broadcast.",
                    "returns": [
                        [
                            [
                                "VoiceBroadcast"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 38,
                        "file": "ClientVoiceManager.js",
                        "path": "src/client/voice"
                    }
                },
                {
                    "name": "joinChannel",
                    "description": "Sets up a request to join a voice channel.",
                    "access": "private",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The voice channel to join",
                            "type": [
                                [
                                    [
                                        "VoiceChannel"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": [
                        [
                            [
                                "Promise",
                                "<"
                            ],
                            [
                                "VoiceConnection",
                                ">"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 75,
                        "file": "ClientVoiceManager.js",
                        "path": "src/client/voice"
                    }
                }
            ],
            "meta": {
                "line": 11,
                "file": "ClientVoiceManager.js",
                "path": "src/client/voice"
            }
        }
    ]
}